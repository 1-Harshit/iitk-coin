{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation iitk-coin Summer Project 2021 SnT Project 2021, Programming Club This repository contains the backend code for the IITK Coin which is a reward based psuedo currency of IIT Kanpur. Relevant Links Final Documentation Website Midterm Evaluation presentation Midterm Documentation Table Of Content Development Environment Directory Structure Usage Endpoints Models Settings Examples Project info Project name: IITK Coin Offered by: Programming Club, IITK Mentor: Bhuvan Singla Repository: GitHub Author: Harshit Raj Project description: A reward based psuedo currency for IIT Kanpur. Project duration: 9 weeks","title":"Home"},{"location":"#iitk-coin","text":"Summer Project 2021 SnT Project 2021, Programming Club This repository contains the backend code for the IITK Coin which is a reward based psuedo currency of IIT Kanpur.","title":"iitk-coin"},{"location":"#relevant-links","text":"Final Documentation Website Midterm Evaluation presentation Midterm Documentation","title":"Relevant Links"},{"location":"#table-of-content","text":"Development Environment Directory Structure Usage Endpoints Models Settings Examples","title":"Table Of Content"},{"location":"#project-info","text":"Project name: IITK Coin Offered by: Programming Club, IITK Mentor: Bhuvan Singla Repository: GitHub Author: Harshit Raj Project description: A reward based psuedo currency for IIT Kanpur. Project duration: 9 weeks","title":"Project info"},{"location":"Development/","text":"Development Development Environment - OS: Ubuntu 20.04.2 LTS x86-64 # https://ubuntu.com/download - Kernel: Linux 5.8.0-59-generic # https://kernel.ubuntu.com/ - go version: go1.16.6 linux/amd64 # https://golang.org/dl/ - text editor: VSCode # https://code.visualstudio.com/download - terminal: Zsh # https://ohmyz.sh/ Directory Structure . ~go/src/github.com/1-Harshit/iitk-coin \u251c\u2500\u2500 auth \u2502 \u2514\u2500\u2500 auth.go \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 config.go \u2502 \u251c\u2500\u2500 email_cred.go \u2502 \u251c\u2500\u2500 otp.go \u2502 \u251c\u2500\u2500 settings.go \u2502 \u2514\u2500\u2500 validate.go \u251c\u2500\u2500 data.db \u251c\u2500\u2500 db \u2502 \u251c\u2500\u2500 db.go \u2502 \u251c\u2500\u2500 otp.go \u2502 \u251c\u2500\u2500 redeem.go \u2502 \u2514\u2500\u2500 user.go \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 go.mod \u251c\u2500\u2500 go.sum \u251c\u2500\u2500 iitk-coin \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 main.go \u251c\u2500\u2500 Models.png \u251c\u2500\u2500 README.md \u2514\u2500\u2500 routes \u251c\u2500\u2500 redeem.go \u251c\u2500\u2500 trnxn.go \u251c\u2500\u2500 user.go \u2514\u2500\u2500 utility.go 4 directories, 23 files","title":"Development"},{"location":"Development/#development","text":"","title":"Development"},{"location":"Development/#development-environment","text":"- OS: Ubuntu 20.04.2 LTS x86-64 # https://ubuntu.com/download - Kernel: Linux 5.8.0-59-generic # https://kernel.ubuntu.com/ - go version: go1.16.6 linux/amd64 # https://golang.org/dl/ - text editor: VSCode # https://code.visualstudio.com/download - terminal: Zsh # https://ohmyz.sh/","title":"Development Environment"},{"location":"Development/#directory-structure","text":". ~go/src/github.com/1-Harshit/iitk-coin \u251c\u2500\u2500 auth \u2502 \u2514\u2500\u2500 auth.go \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 config.go \u2502 \u251c\u2500\u2500 email_cred.go \u2502 \u251c\u2500\u2500 otp.go \u2502 \u251c\u2500\u2500 settings.go \u2502 \u2514\u2500\u2500 validate.go \u251c\u2500\u2500 data.db \u251c\u2500\u2500 db \u2502 \u251c\u2500\u2500 db.go \u2502 \u251c\u2500\u2500 otp.go \u2502 \u251c\u2500\u2500 redeem.go \u2502 \u2514\u2500\u2500 user.go \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 go.mod \u251c\u2500\u2500 go.sum \u251c\u2500\u2500 iitk-coin \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 main.go \u251c\u2500\u2500 Models.png \u251c\u2500\u2500 README.md \u2514\u2500\u2500 routes \u251c\u2500\u2500 redeem.go \u251c\u2500\u2500 trnxn.go \u251c\u2500\u2500 user.go \u2514\u2500\u2500 utility.go 4 directories, 23 files","title":"Directory Structure"},{"location":"Endpoints/","text":"Endpoints POST requests take place via JSON requests. A typical usage would look like curl -H \"Content-Type: application/json\" [-H \"Authorization: Bearer JWT\"] --request POST -d '<json-request>' http://localhost:8080/<endpoint> # or if using get curl [-H \"Authorization: Bearer JWT\"] --request GET http://localhost:8080/<endpoint> Signup /signup/otp : POST { \"name\": \"<name>\", \"roll\": \"<rollno>\", \"email\": \"<emailid>\" } /signup : POST { \"name\": \"<name>\", \"roll\": \"<rollno>\", \"email\": \"<emailid>\", \"password\": \"<password>\", \"otp\": \"<otp>\", \"batch\": \"<batch>\" } Login /login : POST { \"roll\": \"<rollno>\", \"password\": \"<password>\" } /secretpage : GET curl -H \"Authorization: Bearer $JWT\" --request GET http://localhost:8080/secretpage Auth Header needed in all endpoints below this User's Info /user/info : GET curl -H \"Authorization: Bearer $JWT\" --request GET http://localhost:8080/user/info /user/reward : GET curl -H \"Authorization: Bearer $JWT\" --request GET http://localhost:8080/user/reward /user/transaction : GET curl -H \"Authorization: Bearer $JWT\" --request GET http://localhost:8080/user/transaction /user/redeem : GET curl -H \"Authorization: Bearer $JWT\" --request GET http://localhost:8080/user/redeem Reset Password /forgotpass/otp : POST { \"roll\": \"<rollno>\", \"email\": \"<emailid>\" } /forgotpass : POST { \"roll\": \"<rollno>\", \"password\": \"<password>\", \"otp\": \"<otp>\" } Rewards /reward : POST Only GenSec and AH { \"roll\": \"<rollno>\", \"coins\": \"<coins>\" } Transfer /transfer/otp : GET curl -H \"Authorization: Bearer $JWT\" --request GET http://localhost:8080/transfer/otp /transfer : POST { \"roll\": \"<rollno>\", \"coins\": \"<coins>\", \"otp\": \"<otp>\" } Store /store/list : GET curl --request GET http://localhost:8080/store/list /store/add : POST Only GenSec and AH { \"name\": \"<itemname>\", \"value\": \"<itemvalue>\" } /store/remove : POST Only GenSec and AH { \"itemNo\": \"<itemno>\" } Redeem /redeem/request/otp : GET curl -H \"Authorization: Bearer $JWT\" --request GET http://localhost:8080/redeem/request/otp /redeem/request : POST { \"itemNo\": \"<itemno>\", \"otp\": \"<otp>\" } /redeem/list : GET Only GenSec and AH curl -H \"Authorization: Bearer $JWT\" --request GET http://localhost:8080//redeem/list /redeem/approve : POST Only GenSec and AH { \"redeemid\": \"<redeemid>\" } /redeem/reject : POST Only GenSec and AH { \"redeemid\": \"<redeemid>\" }","title":"Endpoints"},{"location":"Endpoints/#endpoints","text":"POST requests take place via JSON requests. A typical usage would look like curl -H \"Content-Type: application/json\" [-H \"Authorization: Bearer JWT\"] --request POST -d '<json-request>' http://localhost:8080/<endpoint> # or if using get curl [-H \"Authorization: Bearer JWT\"] --request GET http://localhost:8080/<endpoint>","title":"Endpoints"},{"location":"Endpoints/#signup","text":"/signup/otp : POST { \"name\": \"<name>\", \"roll\": \"<rollno>\", \"email\": \"<emailid>\" } /signup : POST { \"name\": \"<name>\", \"roll\": \"<rollno>\", \"email\": \"<emailid>\", \"password\": \"<password>\", \"otp\": \"<otp>\", \"batch\": \"<batch>\" }","title":"Signup"},{"location":"Endpoints/#login","text":"/login : POST { \"roll\": \"<rollno>\", \"password\": \"<password>\" } /secretpage : GET curl -H \"Authorization: Bearer $JWT\" --request GET http://localhost:8080/secretpage Auth Header needed in all endpoints below this","title":"Login"},{"location":"Endpoints/#users-info","text":"/user/info : GET curl -H \"Authorization: Bearer $JWT\" --request GET http://localhost:8080/user/info /user/reward : GET curl -H \"Authorization: Bearer $JWT\" --request GET http://localhost:8080/user/reward /user/transaction : GET curl -H \"Authorization: Bearer $JWT\" --request GET http://localhost:8080/user/transaction /user/redeem : GET curl -H \"Authorization: Bearer $JWT\" --request GET http://localhost:8080/user/redeem","title":"User's Info"},{"location":"Endpoints/#reset-password","text":"/forgotpass/otp : POST { \"roll\": \"<rollno>\", \"email\": \"<emailid>\" } /forgotpass : POST { \"roll\": \"<rollno>\", \"password\": \"<password>\", \"otp\": \"<otp>\" }","title":"Reset Password"},{"location":"Endpoints/#rewards","text":"/reward : POST Only GenSec and AH { \"roll\": \"<rollno>\", \"coins\": \"<coins>\" }","title":"Rewards"},{"location":"Endpoints/#transfer","text":"/transfer/otp : GET curl -H \"Authorization: Bearer $JWT\" --request GET http://localhost:8080/transfer/otp /transfer : POST { \"roll\": \"<rollno>\", \"coins\": \"<coins>\", \"otp\": \"<otp>\" }","title":"Transfer"},{"location":"Endpoints/#store","text":"/store/list : GET curl --request GET http://localhost:8080/store/list /store/add : POST Only GenSec and AH { \"name\": \"<itemname>\", \"value\": \"<itemvalue>\" } /store/remove : POST Only GenSec and AH { \"itemNo\": \"<itemno>\" }","title":"Store"},{"location":"Endpoints/#redeem","text":"/redeem/request/otp : GET curl -H \"Authorization: Bearer $JWT\" --request GET http://localhost:8080/redeem/request/otp /redeem/request : POST { \"itemNo\": \"<itemno>\", \"otp\": \"<otp>\" } /redeem/list : GET Only GenSec and AH curl -H \"Authorization: Bearer $JWT\" --request GET http://localhost:8080//redeem/list /redeem/approve : POST Only GenSec and AH { \"redeemid\": \"<redeemid>\" } /redeem/reject : POST Only GenSec and AH { \"redeemid\": \"<redeemid>\" }","title":"Redeem"},{"location":"Usage/","text":"Usage Use this Repo mkdir $GOPATH/src/github.com/1-Harshit cd $GOPATH/src/github.com/1-Harshit git clone https://github.com/1-Harshit/iitk-coin.git cd iitk-coin go run main.go # or build the program and run the executable go build ./iitk-coin Use Docker Image docker run --rm -p 8080:8080 1harshit/iitk-coin Expected Output: 2021/07/18 01:03:46 Starting server. Listening on http://localhost:8080 How to use Run the main.go file this will Listen and Serve on localhost:8080 Use curl to use endpoints as shown there","title":"Usage"},{"location":"Usage/#usage","text":"","title":"Usage"},{"location":"Usage/#use-this-repo","text":"mkdir $GOPATH/src/github.com/1-Harshit cd $GOPATH/src/github.com/1-Harshit git clone https://github.com/1-Harshit/iitk-coin.git cd iitk-coin go run main.go # or build the program and run the executable go build ./iitk-coin","title":"Use this Repo"},{"location":"Usage/#use-docker-image","text":"docker run --rm -p 8080:8080 1harshit/iitk-coin Expected Output: 2021/07/18 01:03:46 Starting server. Listening on http://localhost:8080","title":"Use Docker Image"},{"location":"Usage/#how-to-use","text":"Run the main.go file this will Listen and Serve on localhost:8080 Use curl to use endpoints as shown there","title":"How to use"},{"location":"example/","text":"Endpoints Usage example Signup /signup/otp : POST Input and output: curl -X POST 'localhost:8080/signup/otp' -H 'Content-Type: application/json' \\ -d '{ \"name\": \"aska\", \"roll\": 200070, \"email\": \"aska20@iitk.ac.in\", \"batch\": 20, }' { \"error\": \"\", \"message\": \"email Sent\" } /signup : POST Input and output: curl -X POST 'localhost:8080/signup' -H 'Content-Type: application/json' \\ -d '{ \"name\": \"aska\", \"roll\": 200070, \"email\": \"aska20@iitk.ac.in\", \"password\": \"bird123\", \"batch\": 20, \"otp\":\"SaxCgCVJI7\" }' { \"error\": \"\", \"message\": \"User aska with roll 200070 is created\" } Login /login : POST Input and output: curl -X POST 'localhost:8080/login' -H 'Content-Type: application/json' \\ -d '{ \"roll\":200070, \"password\":\"bird123\" }' { \"error\": \"\", \"message\": \"Hey, User aska! Your roll is 200070. This JWT Token Valid for next 12 Hours\", \"jwttoken\": $JWT } /secretpage : GET Input and output: curl -H \"Authorization: Bearer $JWT\" --request GET http://localhost:8080/secretpage { \"error\": \"\", \"message\": \"Welcome 200070! You have successfully accessed this secretpage!\" } User's Info /user/info : GET Input and output: curl -H \"Authorization: Bearer $JWT\" --request GET http://localhost:8080/user/info { \"message\": \"Wallet Money is: 0.000000\", \"data\": { \"roll\": 200070, \"name\": \"Aska\", \"email\": \"aska20@iitk.ac.in\", \"password\": \"\", \"batch\": 20, \"usrtype\": 0, \"otp\": \"\" } } and so on for other endpoints. /user/reward : GET Input: curl -H \"Authorization: Bearer $JWT\" --request GET http://localhost:8080/user/reward /user/transaction : GET curl -H \"Authorization: Bearer $JWT\" --request GET http://localhost:8080/user/transaction /user/redeem : GET curl -H \"Authorization: Bearer $JWT\" --request GET http://localhost:8080/user/redeem Reset Password /forgotpass/otp : POST Input and output: curl -X POST 'localhost:8080/forgotpass/otp' \\ -H 'Content-Type: application/json' \\ -d '{ \"roll\":200070, \"email\":\"aska20@iitk.ac.in\" }' { \"error\": \"\", \"message\": \"email Sent\" } /forgotpass : POST Input and output: curl -X POST 'localhost:8080/forgotpass' \\ -H 'Content-Type: application/json' \\ -d '{ \"roll\":200070, \"email\":\"aska20@iitk.ac.in\", \"password\":\"bird123\", \"otp\":\"Z3R5BLJ9cz\" }' { \"error\": \"\", \"message\": \"Password reset succesful\" } and so on for other endpoints.","title":"Examples"},{"location":"example/#endpoints-usage-example","text":"","title":"Endpoints Usage example"},{"location":"example/#signup","text":"/signup/otp : POST Input and output: curl -X POST 'localhost:8080/signup/otp' -H 'Content-Type: application/json' \\ -d '{ \"name\": \"aska\", \"roll\": 200070, \"email\": \"aska20@iitk.ac.in\", \"batch\": 20, }' { \"error\": \"\", \"message\": \"email Sent\" } /signup : POST Input and output: curl -X POST 'localhost:8080/signup' -H 'Content-Type: application/json' \\ -d '{ \"name\": \"aska\", \"roll\": 200070, \"email\": \"aska20@iitk.ac.in\", \"password\": \"bird123\", \"batch\": 20, \"otp\":\"SaxCgCVJI7\" }' { \"error\": \"\", \"message\": \"User aska with roll 200070 is created\" }","title":"Signup"},{"location":"example/#login","text":"/login : POST Input and output: curl -X POST 'localhost:8080/login' -H 'Content-Type: application/json' \\ -d '{ \"roll\":200070, \"password\":\"bird123\" }' { \"error\": \"\", \"message\": \"Hey, User aska! Your roll is 200070. This JWT Token Valid for next 12 Hours\", \"jwttoken\": $JWT } /secretpage : GET Input and output: curl -H \"Authorization: Bearer $JWT\" --request GET http://localhost:8080/secretpage { \"error\": \"\", \"message\": \"Welcome 200070! You have successfully accessed this secretpage!\" }","title":"Login"},{"location":"example/#users-info","text":"/user/info : GET Input and output: curl -H \"Authorization: Bearer $JWT\" --request GET http://localhost:8080/user/info { \"message\": \"Wallet Money is: 0.000000\", \"data\": { \"roll\": 200070, \"name\": \"Aska\", \"email\": \"aska20@iitk.ac.in\", \"password\": \"\", \"batch\": 20, \"usrtype\": 0, \"otp\": \"\" } }","title":"User's Info"},{"location":"example/#and-so-on-for-other-endpoints","text":"/user/reward : GET Input: curl -H \"Authorization: Bearer $JWT\" --request GET http://localhost:8080/user/reward /user/transaction : GET curl -H \"Authorization: Bearer $JWT\" --request GET http://localhost:8080/user/transaction /user/redeem : GET curl -H \"Authorization: Bearer $JWT\" --request GET http://localhost:8080/user/redeem","title":"and so on for other endpoints."},{"location":"example/#reset-password","text":"/forgotpass/otp : POST Input and output: curl -X POST 'localhost:8080/forgotpass/otp' \\ -H 'Content-Type: application/json' \\ -d '{ \"roll\":200070, \"email\":\"aska20@iitk.ac.in\" }' { \"error\": \"\", \"message\": \"email Sent\" } /forgotpass : POST Input and output: curl -X POST 'localhost:8080/forgotpass' \\ -H 'Content-Type: application/json' \\ -d '{ \"roll\":200070, \"email\":\"aska20@iitk.ac.in\", \"password\":\"bird123\", \"otp\":\"Z3R5BLJ9cz\" }' { \"error\": \"\", \"message\": \"Password reset succesful\" } and so on for other endpoints.","title":"Reset Password"},{"location":"structure/","text":"Structure Models Settings about config/settings.go Some unkown variables are stored there. Path of DB Max coins one can have Minimum Events needed for transfer tax const IntraBatchTax float64 = 0.02 const InterBatchTax float64 = 0.33 const IsStoreOpen bool = true Email Credentials for sending OTP Username Password Footnotes I'd like to name it Koins","title":"Struct"},{"location":"structure/#structure","text":"","title":"Structure"},{"location":"structure/#models","text":"","title":"Models"},{"location":"structure/#settings","text":"","title":"Settings"},{"location":"structure/#about-configsettingsgo","text":"Some unkown variables are stored there. Path of DB Max coins one can have Minimum Events needed for transfer tax const IntraBatchTax float64 = 0.02 const InterBatchTax float64 = 0.33 const IsStoreOpen bool = true Email Credentials for sending OTP Username Password","title":"about config/settings.go"},{"location":"structure/#footnotes","text":"I'd like to name it Koins","title":"Footnotes"}]}